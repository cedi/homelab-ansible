---
- hosts: nuc
  gather_facts: true
  become: true
  collections:
    - grafana.grafana:5.7.0
  roles:
    - role: geerlingguy.node_exporter
    - role: grafana.grafana.alloy
      vars:
        alloy_user_groups:
          - "systemd-journal"
          - "adm"
          - "sudo"
        alloy_systemd_override: |
          [Service]
          User=root
        alloy_env_file_vars:
          CUSTOM_ARGS: "--server.http.listen-addr=0.0.0.0:12345"
        alloy_config: |
          loki.write "grafana_loki" {
            endpoint {
              url       = "https://loki-gateway.sphinx-map.ts.net/loki/api/v1/push"
              tenant_id = "homelab"
            }
          }

          local.file_match "local_files" {
            path_targets = [{"__path__" = "/var/log/*.log"}]
            sync_period = "5s"
          }

          loki.source.file "log_scrape" {
            targets       = local.file_match.local_files.targets
            forward_to    = [loki.process.log_scrape.receiver]
            tail_from_end = true
          }

          loki.process "log_scrape" {
            forward_to = [loki.write.grafana_loki.receiver]

            stage.static_labels {
              values = {
                hostname = "nuc",
              }
            }
          }

          loki.relabel "journal" {
            forward_to = []

            rule {
              source_labels = ["__journal__systemd_unit"]
              target_label  = "unit"
            }

            rule {
              source_labels = ["__journal__hostname"]
              target_label  = "hostname"
            }
          }


          loki.source.journal "log_syslog" {
            format_as_json = true
            relabel_rules = loki.relabel.journal.rules
            forward_to     = [loki.write.grafana_loki.receiver]
          }

          prometheus.remote_write "mimir" {
            endpoint {
              url = "https://mimir-nginx.sphinx-map.ts.net/api/v1/push"
              headers = {
                "X-Scope-OrgID" = "homelab",
              }
            }
          }

          prometheus.scrape "node_exporter" {
            job_name = "node_exporter"
            targets = [
              {"__address__" = "jumphost:9100"},
              {"__address__" = "nas:9100"},
              {"__address__" = "clusterpi-leader:9100"},
              {"__address__" = "clusterpi-worker1:9100"},
              {"__address__" = "clusterpi-worker2:9100"},
              {"__address__" = "clusterpi-worker3:9100"},
              {"__address__" = "clusterpi-worker4:9100"},
              {"__address__" = "storagepi-ceph1:9100"},
              {"__address__" = "storagepi-ceph2:9100"},
              {"__address__" = "storagepi-ceph3:9100"},
              {"__address__" = "blade-pi1:9100"},
              {"__address__" = "blade-pi2:9100"},
              {"__address__" = "blade-pi3:9100"},
              {"__address__" = "blade-pi4:9100"},
              {"__address__" = "timepi:9100"},
              {"__address__" = "nuc:9100"},
            ]
            forward_to = [prometheus.remote_write.mimir.receiver]
          }

          prometheus.scrape "rpi_exporter" {
            job_name = "rpi_exporter"
            targets = [
              {"__address__" = "jumphost:9243"},
              {"__address__" = "nas:9243"},
              {"__address__" = "clusterpi-leader:9243"},
              {"__address__" = "clusterpi-worker1:9243"},
              {"__address__" = "clusterpi-worker2:9243"},
              {"__address__" = "clusterpi-worker3:9243"},
              {"__address__" = "clusterpi-worker4:9243"},
              {"__address__" = "storagepi-ceph1:9243"},
              {"__address__" = "storagepi-ceph2:9243"},
              {"__address__" = "storagepi-ceph3:9243"},
              {"__address__" = "blade-pi1:9243"},
              {"__address__" = "blade-pi2:9243"},
              {"__address__" = "blade-pi3:9243"},
              {"__address__" = "blade-pi4:9243"},
              {"__address__" = "timepi:9243"},
            ]
            forward_to = [prometheus.remote_write.mimir.receiver]
          }

          prometheus.scrape "blade_exporter" {
            job_name = "blade_exporter"
            targets = [
              {"__address__" = "blade-pi1:9666"},
              {"__address__" = "blade-pi2:9666"},
              {"__address__" = "blade-pi3:9666"},
              {"__address__" = "blade-pi4:9666"},
            ]
            forward_to = [prometheus.remote_write.mimir.receiver]
          }

          prometheus.scrape "snmp_exporter" {
            job_name = "snmp"
            targets = [
              {"__address__" = "192.168.0.64:9116"},
            ]
            forward_to   = [prometheus.remote_write.mimir.receiver]
            metrics_path = "/snmp"
            params       = {
              "module"   = ["synology"],
              "auth"     = ["snmpv3"],
              "target"     = ["nas"],
            }
          }

          prometheus.scrape "cadvisor" {
            job_name = "cadvisor"
            targets = [
              {"__address__" = "192.168.0.64:8123"},
            ]
            forward_to   = [prometheus.remote_write.mimir.receiver]
            metrics_path = "/metrics"
          }

          prometheus.scrape "tailscale_exporter" {
            job_name = "tailscale_exporter"
            targets = [
              {"__address__" = "100.100.100.100" },
              {"__address__" = "100.65.216.48:5252" },
              {"__address__" = "100.92.89.43:5252" },
              {"__address__" = "100.94.152.81:5252" },
              {"__address__" = "100.123.236.103:5252" },
              {"__address__" = "100.126.248.78:5252" },
              {"__address__" = "100.103.254.83:5252" },
              {"__address__" = "100.95.24.14:5252" },
              {"__address__" = "100.122.149.90:5252" },
              {"__address__" = "100.83.246.57:5252" },
              {"__address__" = "100.85.86.18:5252" },
            ]
            forward_to   = [prometheus.remote_write.mimir.receiver]
            metrics_path = "/metrics"
          }

          prometheus.exporter.self "self" {
          }

          prometheus.scrape "self" {
            targets    = prometheus.exporter.self.self.targets
            forward_to = [prometheus.remote_write.mimir.receiver]
          }

          otelcol.exporter.otlp "tempo" {
            client {
              endpoint = "tempo-distributor.sphinx-map.ts.net/otlp-http"
            }
          }

          otelcol.receiver.otlp "default" {
            grpc {
              endpoint = "0.0.0.0:4317"
            }
            http {
              endpoint = "0.0.0.0:4318"
            }
            output {
              metrics = [otelcol.exporter.otlp.tempo.input]
              logs    = [otelcol.exporter.otlp.tempo.input]
              traces  = [otelcol.exporter.otlp.tempo.input]
            }
          }
